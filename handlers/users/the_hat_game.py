from time import sleep

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import CallbackQuery

from lib import db_selection
from keyboards.inline import menu, generate_celebs, generation_estimation, generating_more
from loader import dp
from states import UserMode


# –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ + /menu
@dp.message_handler(Command('menu'), state=UserMode.celebs)  # /menu
async def user_register(message: types.Message, state: FSMContext):
    await message.answer(text=f'<b>--> –ò–≥—Ä–∞ –≤ —à–ª—è–ø—Éüé©</b>\n'
                              f'–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–ª–µ–±—Ä–∏—Ç–∏/–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π\n'
                              f'–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞/–ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n\n'
                              f'<b>--> –ê–∫—Ç–∏–≤–∏—Ç–∏üòà</b>\n'
                              f'–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ–≤ –¥–ª—è –∏–≥—Ä—ã –≤ –∞–∫—Ç–∏–≤–∏—Ç–∏\n'
                              f'–í–º–µ—Å—Ç–æ —Å–ª–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Å–ª–æ–≤–∞ (–∏ –Ω–µ —Ç–æ–ª—å–∫–æüôà) –≤ –±–æ—Ç–µüòç\n\n'
                              f'–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ç—ã –∏–≥—Ä–∞–µ—à—å —Å–Ω–∏–∑—É‚¨áÔ∏è',
                         reply_markup=menu)

    await state.finish()


@dp.message_handler(Command('menu'))  # /menu
async def user_register(message: types.Message):
    await message.answer(text=f'<b>--> –ò–≥—Ä–∞ –≤ —à–ª—è–ø—Éüé©</b>\n'
                              f'–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–ª–µ–±—Ä–∏—Ç–∏/–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π\n'
                              f'–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞/–ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n\n'
                              f'<b>--> –ê–∫—Ç–∏–≤–∏—Ç–∏üòà</b>\n'
                              f'–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ–≤ –¥–ª—è –∏–≥—Ä—ã –≤ –∞–∫—Ç–∏–≤–∏—Ç–∏\n'
                              f'–í–º–µ—Å—Ç–æ —Å–ª–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Å–ª–æ–≤–∞ (–∏ –Ω–µ —Ç–æ–ª—å–∫–æüôà) –≤ –±–æ—Ç–µüòç\n\n'
                              f'–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ç—ã –∏–≥—Ä–∞–µ—à—å —Å–Ω–∏–∑—É‚¨áÔ∏è',
                         reply_markup=menu)


# –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π + –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
@dp.callback_query_handler(text='–ò–≥—Ä–∞ –≤ —à–ª—è–ø—É', state=UserMode.celebs)
async def accept_id(call: CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer(f'–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Ö–æ—á–µ—à—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞/–ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n\n'
                              f'–ª–∏–±–æ –∂–µ –ø—Ä–æ—Å—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–Ω–¥–æ–º–Ω–æ –±–µ–∑ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n\n'
                              f'/menu - –≤—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                              reply_markup=generate_celebs)

    await state.finish()
    await UserMode.celebs.set()


# –ö–Ω–æ–ø–∫–∞: –ò–≥—Ä–∞ –≤ —à–ª—è–ø—É
@dp.callback_query_handler(text='–ò–≥—Ä–∞ –≤ —à–ª—è–ø—É')
async def accept_id(call: CallbackQuery):
    await call.message.edit_text(f'–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Ö–æ—á–µ—à—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞/–ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n\n'
                                 f'–ª–∏–±–æ –∂–µ –ø—Ä–æ—Å—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–Ω–¥–æ–º–Ω–æ –±–µ–∑ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n\n'
                                 f'/menu - –≤—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                 reply_markup=generate_celebs)

    await UserMode.celebs.set()


@dp.callback_query_handler(text=['–ö–∏–Ω–æ–∏–Ω–¥—É—Å—Ç—Ä–∏—è', '–ú—É–∑—ã–∫–∞', 'YouTube', '–°–ø–æ—Ä—Ç', '–ü–æ–ª–∏—Ç–∏–∫–∞', '–ë–∏–∑–Ω–µ—Å',
                                 '–£—á—ë–Ω—ã–µ/–ü–∏—Å–∞—Ç–µ–ª–∏', '–†–∞–Ω–¥–æ–º'], state=UserMode.celebs)
async def accept_id(call: CallbackQuery, state: FSMContext):
    field_of_activity = call.data

    async with state.proxy() as data:
        data['field_of_activity'] = field_of_activity
        data['seq_number'] = 10

    await call.message.edit_text(f'–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{field_of_activity}</b>\n\n'
                                 f'/menu - –æ—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –≤—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n'
                                 f'–ì–µ–Ω–µ—Ä–∞—Ü–∏—è..')

    if field_of_activity == '–†–∞–Ω–¥–æ–º':
        text = await db_selection.full_random(seq_number=0)
    else:
        text = await db_selection.random_names(field_of_activity=field_of_activity, seq_number=0)

    sleep(0.5)
    await call.message.edit_text(f'–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{field_of_activity}</b>\n\n'
                                 f'/menu - –æ—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –≤—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n'
                                 f'–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...')
    sleep(0.5)
    await call.message.edit_text(f'–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{field_of_activity}</b>\n\n'
                                 f'/menu - –æ—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –≤—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n'
                                 f'–ì–µ–Ω–µ—Ä–∞—Ü–∏—è....')
    sleep(0.5)

    await call.message.edit_text(f'–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{field_of_activity}</b>\n\n'
                                 f'/menu - –æ—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –≤—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

    await call.message.answer(f'{text}')
    await call.message.answer(f'<i>*–æ—Ü–µ–Ω–∏ —Å–Ω–∏–∑—É, –∫–∞–∫ —Ç–µ–±–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è</i>',
                              reply_markup=generation_estimation)


@dp.callback_query_handler(text=['1‚≠êÔ∏è', '2‚≠êÔ∏è', '3‚≠êÔ∏è', '4‚≠êÔ∏è', '‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è'],
                           state=UserMode.celebs)
async def accept_id(call: CallbackQuery, state: FSMContext):
    # await call.message.edit_reply_markup(reply_markup=None)
    await call.message.edit_text(f'–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!\n\n'
                                 f'/menu - –≤—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n'
                                 f'–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è '
                                 f'–∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                                 reply_markup=generating_more)


@dp.callback_query_handler(text='–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë', state=UserMode.celebs)
async def accept_id(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    field_of_activity = data.get('field_of_activity')
    seq_number = data.get('seq_number')

    if field_of_activity == '–†–∞–Ω–¥–æ–º':
        text = await db_selection.full_random(seq_number)
    else:
        text = await db_selection.random_names(field_of_activity, seq_number)

    async with state.proxy() as data:
        data['seq_number'] += 10

    await call.message.edit_text(f'{text}')
    await call.message.answer(f'<i>*–æ—Ü–µ–Ω–∏ —Å–Ω–∏–∑—É, –∫–∞–∫ —Ç–µ–±–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è</i>',
                              reply_markup=generation_estimation)
